apply plugin: 'com.android.application'

/* Variables */
ext.currentUser = System.getenv("USER")
ext.userHome = System.getProperty("user.home")
ext.keystorePath = '/Documents/KnightNewsReleases/knight_news_keystore.keystore'

android {
    compileSdkVersion 19
    buildToolsVersion '20.0.0'

    defaultConfig {
        minSdkVersion 11
        targetSdkVersion 19
        versionCode 16
        versionName '2.4.0'
    }

    signingConfigs {
        release {
            //storeFile file("knight_news_keystore.keystore")
            storeFile file(userHome + keystorePath)
            storePassword ""
            keyAlias "knightnews"
            keyPassword ""
        }
    }

    buildTypes {
        debug {
            applicationIdSuffix ".d"
            versionNameSuffix "-debug"
        }

        release {
            runProguard false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
            signingConfig signingConfigs.release
        }
    }

    // This is important, it will run lint checks but won't abort build
    lintOptions {
        abortOnError false
        disable 'InvalidPackage', 'OldTargetApi'
    }

    productFlavors {
    }
}

dependencies {
    compile project(':volley')
    compile 'com.android.support:support-v4:20.0.0'
    compile 'com.android.support:appcompat-v7:20.0.0'
    compile 'com.google.android.gms:play-services:5.0.89'
    compile files('libs/picasso-2.2.0.jar')
    compile files('libs/Parse-1.5.1.jar')
}

/*
    Building for release must occur from the command line, use this task "./gradlew assembleRelease".
    But a regular debug build is fine running from just Android Studio, use the "run" button.
 */
gradle.taskGraph.whenReady { taskGraph ->
    // Only execute when we are trying to assemble a release build
    if (taskGraph.hasTask(':homeActivity:assembleRelease')) {
        //get the storePassword from the console
        def keyStorePass = System.console().readPassword("\nPlease enter keystore password: ")
        // readPassword returns a char[] so we need to wrap it into a string, because that's
        // most likely what you need
        keyStorePass = new String(keyStorePass)

        //get the keyPassword from the console
        def keyPass = System.console().readPassword("\nPlease enter the key password: ")

        keyPass = new String(keyPass)

        //set the storePassword and the keyPassword
        android.signingConfigs.release.storePassword = keyStorePass
        android.signingConfigs.release.keyPassword = keyPass
    }
}

